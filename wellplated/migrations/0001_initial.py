# Generated by Django 5.1.1 on 2024-12-02 13:47


from django.conf import settings
from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations import state
from django.db.models import (
    BigAutoField,
    CharField,
    CheckConstraint,
    DateTimeField,
    ForeignKey,
    GeneratedField,
    ManyToManyField,
    PositiveSmallIntegerField,
    Q,
    TextField,
    UniqueConstraint,
    Value,
)
from django.db.models.deletion import PROTECT
from django.db.models.functions import Cast, Coalesce, Concat, Left, Length, LPad, Substr
from modelcluster.fields import ParentalKey

from wellplated.models import CheckedCharField, CheckedPositiveSmallIntegerField

PREFIX_ID_LENGTH = 12
CONTAINER_CODE_LENGTH = 1 + 2 + PREFIX_ID_LENGTH  # bottom row, right column

from re import compile

extract_model = compile(r'^.*wellplated_(?P<model>[a-z]+)\..+$')


# Tried using '%(app_label)s_%(class)s' as mentioned in
# https://docs.djangoproject.com/en/5.1/ref/models/constraints/
# but that resulted in wellplated_format as expected but also
# wellplated_newformat, presumably due to some migration renaming.
def constrain_models() -> list[migrations.AddConstraint]:
    """Forbid out-of-bounds at the database level"""
    return [
        migrations.AddConstraint(
            constraint=CheckConstraint(condition=condition, name=name),
            model_name=extract_model.match(name).group(1),
        )
        for name, condition in (
            ('len(wellplated_format.bottom_row) == 1', Q(bottom_row__length=1)),
            ("wellplated_format.bottom_row <= 'P'", Q(bottom_row__lte='P')),
            ("wellplated_format.bottom_row >= 'A'", Q(bottom_row__gte='A')),
            ('wellplated_format.right_column >= 1', Q(right_column__gte=1)),
            ('wellplated_format.right_column <= 24', Q(right_column__lte=24)),
            (
                f'len(wellplated_format.prefix) <= {PREFIX_ID_LENGTH - 1}',
                Q(prefix__length__lte=PREFIX_ID_LENGTH - 1),
            ),
            ("'.' not in wellplated_format.prefix", ~Q(prefix__contains='.')),
            ('wellplated_container.external_id >= 0', Q(external_id__gte=0)),
            (
                'wellplated_container.external_id <= 99999999999',
                Q(external_id__lte=int('9' * (PREFIX_ID_LENGTH - 1))),
            ),
            ('len(wellplated_well.row) == 1', Q(row__length=1)),
            ("wellplated_well.row >= 'A'", Q(row__gte='A')),
            (
                'wellplated_well.row <= wellplated_well.container[:1]',
                Q(row__lte=Left('container', 1)),
            ),
            ('wellplated_well.column >= 1', Q(column__gte=1)),
            (
                'wellplated_well.column <= int(wellplated_well.container[1:2])',
                Q(column__lte=Cast(Substr('container', 2, 4), PositiveSmallIntegerField())),
            ),
        )
    ] + [
        migrations.AddConstraint(
            constraint=UniqueConstraint(
                fields=('container', 'row', 'column'), name='unique_container_row_column'
            ),
            model_name='well',
        )
    ]


def create_untracked(apps: state.StateApps, _schema_editor: BaseDatabaseSchemaEditor) -> None:
    """
    Infinite source and sink

    Leave unused low numbers between start and end for future special purpose use.
    """
    for pk, purpose in {0: 'start', 999: 'end'}.items():
        container = apps.get_model('wellplated', 'Container').objects.create(
            id=pk,
            code=purpose,
            format=apps.get_model('wellplated', 'Format').objects.create(
                bottom_row='A', right_column=1, prefix=purpose, purpose=purpose
            ),
        )
        container.wells.add(apps.get_model('wellplated', 'Well')(row='A', column=1))
        container.wells.commit()


class Migration(migrations.Migration):
    initial = True

    dependencies = (migrations.swappable_dependency(settings.AUTH_USER_MODEL),)

    operations = (
        migrations.CreateModel(
            name='Format',
            fields=[
                (
                    'id',
                    BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('bottom_row', CheckedCharField(default='H', max_length=1)),
                (
                    'right_column',
                    CheckedPositiveSmallIntegerField(default=12, max_value=24, min_value=1),
                ),
                ('prefix', CheckedCharField(max_length=PREFIX_ID_LENGTH - 1, unique=True)),
                (
                    'bottom_right_prefix',
                    GeneratedField(
                        db_persist=True,
                        expression=Concat(
                            'bottom_row',
                            LPad(Cast('right_column', CharField()), 2, Value('0')),
                            'prefix',
                        ),
                        # bottom row, right column
                        output_field=CharField(max_length=1 + 2 + PREFIX_ID_LENGTH - 1),
                        unique=True,
                    ),
                ),
                ('created_at', DateTimeField(auto_now_add=True, editable=False)),
                ('purpose', TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                (
                    'id',
                    BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'external_id',
                    CheckedPositiveSmallIntegerField(
                        blank=True,
                        default=None,
                        max_value=int('9' * (PREFIX_ID_LENGTH - 1)),
                        null=True,
                    ),
                ),
                (
                    'code',
                    GeneratedField(
                        db_persist=True,
                        expression=Concat(
                            'format',
                            LPad(
                                Cast(Coalesce('external_id', 'id'), CharField()),
                                Value(CONTAINER_CODE_LENGTH) - Length('format'),
                                Value('0'),
                            ),
                        ),
                        editable=False,
                        output_field=CharField(max_length=CONTAINER_CODE_LENGTH),
                        unique=True,
                    ),
                ),
                ('created_at', DateTimeField(auto_now_add=True, editable=False)),
                (
                    'format',
                    ForeignKey(
                        editable=False,
                        on_delete=PROTECT,
                        related_name='containers',
                        to='wellplated.format',
                        to_field='bottom_right_prefix',
                    ),
                ),
            ],
            options={'abstract': False},
        ),
        migrations.CreateModel(
            name='Well',
            fields=[
                (
                    'id',
                    BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'container',
                    ParentalKey(
                        db_column='container_code',
                        editable=False,
                        on_delete=PROTECT,
                        related_name='wells',
                        to='wellplated.container',
                        to_field='code',
                    ),
                ),
                ('row', CheckedCharField(max_length=1, min_length=1, min_value='A')),
                (
                    'column',
                    CheckedPositiveSmallIntegerField(
                        max_value=Cast(Substr('container', 2, 4), PositiveSmallIntegerField()),
                        min_value=1,
                    ),
                ),
            ],
        ),
        *constrain_models(),
        migrations.RunPython(create_untracked, migrations.RunPython.noop),
        migrations.CreateModel(
            name='Plan',
            fields=[
                (
                    'id',
                    BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                ('created_at', DateTimeField(auto_now_add=True)),
                (
                    'created_by',
                    ForeignKey(
                        on_delete=PROTECT, related_name='plans_created', to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                (
                    'id',
                    BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name='ID'
                    ),
                ),
                (
                    'plan',
                    ForeignKey(on_delete=PROTECT, related_name='transfers', to='wellplated.plan'),
                ),
                ('source', ForeignKey(on_delete=PROTECT, related_name='+', to='wellplated.well')),
                ('sink', ForeignKey(on_delete=PROTECT, related_name='+', to='wellplated.well')),
            ],
        ),
        migrations.AddField(
            model_name='well',
            name='sinks',
            field=ManyToManyField(
                related_name='sources', through='wellplated.Transfer', to='wellplated.well'
            ),
        ),
    )
