[build-system]
requires = ['setuptools>=61.0', 'setuptools_scm[toml]>=6.2', 'wheel']
build-backend = 'setuptools.build_meta'

[project]
classifiers = [
    'Framework :: Django',
    'Framework :: Wagtail',
    'Intended Audience :: Healthcare Industry',
    'Intended Audience :: Manufacturing',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: BSD License',
    'Natural Language :: English',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3',
    'Typing :: Typed',
]
description = 'Python Django models for liquid transfers'
dependencies = ['django']
dynamic = ['version']
name = 'wellplated'
readme = 'README.md'
requires-python = '>=3.10'

[project.urls]
Homepage = 'https://github.com/biobuddies/wellplated'

[tool.codespell]
ignore-words-list = 'fro,trough'

[tool.django-stubs]
django_settings_module = 'demodj.settings'

[tool.mypy]
plugins = ['mypy_django_plugin.main']

[[tool.mypy.overrides]]
module = ['modelcluster.*', 'wagtail.*']
ignore_missing_imports = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = 'demodj.settings'
django_debug_mode = 'keep'
python_files = ['tests.py', 'test_*.py']

[tool.ruff]
line-length = 100

[tool.ruff.format]
quote-style = 'single'
skip-magic-trailing-comma = true

[tool.ruff.lint]
extend-select = ['D213'] # Beginning-end symmetry
fixable = ['ALL']
ignore = [
    'ANN101', # Deprecated and will be removed in a future release
    'ANN401', # **kwargs: Any is reasonable
    'COM812', # Insists on join([],) over join([])
    'D105',   # __str__ does not need a docstring
    'D106',   # Nested class Meta does not need a docstring
    'D400',   # Sentence fragments work well, so don't require a period
    'EM101',  # Simple code is more important than simple tracebacks
    'EM102',  # Simple code is more important than simple tracebacks
    'ISC001', # Silence warning about conflict with ruff formatter
    'FIX002', # Trust that if resolving the issue were feasible, the author already would have
    # Comments de-mystifying "magic values" are great. Turning the comment into a variable
    # assignment worsens code. It encourages definition far from use, and forces shorter and less
    # punctuated explanations.
    'PLR2004',
    'PT013',   # `import pytest` would be inconsistent with other imports
    'Q000',    # ruff format will single quote
    'Q001',    # ruff format will single quote
    'Q003',    # ruff format will single quote
    'TD002',   # The git log records who wrote a TODO line
    'TD003',   # Not planning use issues that heavily
    'TD004',   # A colon takes up space without really improving readability
    'TRY002',  # Forces premature specialization; the right time to subclass is when the exception starts being caught
]
select = ['ALL']

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
'**/test*.py' = ['S101']
'**/__init__.py' = ['D104']
'wellplated/migrations/*.py' = ['D100', 'D101']

[tool.ruff.lint.pydocstyle]
convention = 'numpy' # Pretty arbitrary choice

[tool.setuptools]
packages = ['wellplated']

[tool.setuptools_scm]
